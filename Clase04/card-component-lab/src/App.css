#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
}

button:hover {
  transform: translateY(-2px);
}

button:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

/* Animaciones suaves */
* {
  transition: all 0.3s ease;
}

/* Responsive design */
@media (max-width: 768px) {
  #root {
    padding: 1rem;
  }
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* Card Component Lab - Clase 04

Este proyecto demuestra los conceptos de React vistos en la Clase 04.

## 🎯 Objetivos del Laboratorio

- ✅ Crear componente Card que reciba **props con valores**
- ✅ Implementar **props con funciones** 
- ✅ Utilizar **props children** para contenido personalizable
- ✅ Demostrar el uso de **useState Hook**
- ✅ Aplicar **estilos inline como objetos**
- ✅ Crear **componentes reutilizables**

## 🚀 Ejecutar el proyecto

```bash
# Instalar dependencias
npm install

# Ejecutar en modo desarrollo
npm run dev

# Acceder a: http://localhost:5173
```

## 📁 Estructura del Proyecto

```
src/
├── components/
│   ├── Card.jsx          # Componente principal Card
│   └── Counter.jsx       # Componente Counter con useState
├── App.jsx              # Aplicación principal
├── App.css              # Estilos CSS
└── main.jsx             # Punto de entrada
```

## 🔧 Conceptos Implementados

### Props con Valores
- `title`: Título de la card
- `description`: Descripción del contenido  
- `imageUrl`: URL de imagen (opcional)
- `isHighlighted`: Boolean para resaltar
- `variant`: Tema claro/oscuro

### Props con Funciones
- `onButtonClick`: Función ejecutada al hacer click
- Funciones: `agregarFavorito`, `contactarVendedor`, `comprarProducto`

### Props Children
- Contenido personalizable entre etiquetas
- Listas, componentes anidados, texto personalizado
- Hace los componentes más reutilizables

### useState Hook
- Estado de favoritos
- Estado del tema (claro/oscuro)
- Estado del contador

## 🎨 Características

- **Componentización**: Componentes reutilizables
- **Estilos inline**: Objetos JavaScript para estilos
- **Renderizado condicional**: Elementos opcionales
- **Estado dinámico**: Interfaz reactiva
- **Tema claro/oscuro**: Cambio dinámico de apariencia */
